// {{{
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>
#include <array>

#define int long long
#define REP(i,n) for (int i=0;i<(n);i++)
#define RREP(i,n) for (int i=(n)-1;i>=0;i--)
#define ll long long

int LL_MAX = 9223372036854775807;
int LL_MIN = -9223372036854775808;

using namespace std;

int gcd(int a, int b);
int gcd3(int a, int b, int c);
int lcm(int a, int b);
void safe_sort(vector<int> *arr);
void unsafe_sort(vector<int> *arr);
bool is_prime(int num);
vector<int> generate_prime(int num);
// }}}

signed main() {

  return 0;
}

// {{{
// ２数の最大公約数
int gcd(int a, int b) {
  int t; while (b != 0) { t = b; b = a % b; a = t; } return a;
}

// ３数の最大公約数
int gcd3(int a, int b, int c) {
  int s, t; s = gcd(a, b); t = gcd(c, s); return t;
}

// 最大公倍数
int lcm(int a, int b) {
  if (a * b == 0) return 0; return (a * b / gcd(a, b));
}

/** {{{
 * 安全なソート
 * 使い方
 * vector<int> arr; // データ列を vectorで用意
 * safe_sort(&arr);     // アドレスを渡す
 }}} */
void safe_sort(vector<int> *arr) {
  // 逆順にするとき
  // return stable_sort(arr->begin(), arr->end(), greater<int>());
  return stable_sort(arr->begin(), arr->end());
}

/** {{{
 * 高速なソート
 * 使い方
 * vector<int> arr; // データ列を vectorで用意
 * unsafe_sort(&arr);     // アドレスを渡す
 }}} */
void unsafe_sort(vector<int> *arr) {
  // 逆順にするとき
  // return sort(arr->begin(), arr->end(), greater<int>());
  return sort(arr->begin(), arr->end());
}

// 素数判定
bool is_prime(int num) {
  if (num < 2) return false;
  else if (num == 2) return true;
  else if (num % 2 == 0) return false;
  else if (num % 3 == 0) return false;
  else if (num % 5 == 0) return false;
  else if (num % 7 == 0) return false;
  else if (num % 11 == 0) return false;
  double root = sqrt(num);
  for (int i = 3; i <= root; i += 2) { if (num % i == 0) return false; }
  return true;
}

/** {{{
 *  素数列を生成
 *  使い方
 *  vector<int> arr = generate_prime(n);
 }}} */
vector<int> generate_prime(int num) {
  vector<int> arr;
  for (int i = 2; i < num; i++) {
    if (is_prime(i)) arr.push_back(i);
  }
  return arr;
}
// }}}
// vim: ft=cpp ts=2 sts=2 sw=2 tw=0
